# .github/workflows/backend-ci.yml
name: Backend CI

on:
  push:
    branches:
      - main
    paths:
      - 'src/backend/**'
      - '.github/workflows/backend-ci.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'src/backend/**'

env:
  PYTHON_VERSION: '3.11'
  WORKING_DIRECTORY: 'src/backend'

jobs:
  lint:
    name: Code Linting
    runs-on: ubuntu-latest
    needs: []
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3 # actions/checkout version v3
      - name: Setup Python
        uses: actions/setup-python@v4 # actions/setup-python version v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'src/backend/requirements.txt'
      - name: Install dependencies
        run: pip install -r requirements.txt
      - name: Install linting tools
        run: pip install pylint flake8
      - name: Run pylint
        run: pylint --rcfile=.pylintrc --output-format=parseable $(find . -name "*.py" -not -path "*/migrations/*" -not -path "*/tests/*")
      - name: Run flake8
        run: flake8 --config=.flake8 .
      - name: Upload linting results
        uses: actions/upload-artifact@v3 # actions/upload-artifact version v3
        with:
          name: lint-results
          path: 'src/backend/lint-results.txt'
          if-no-files-found: ignore

  unit_tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: [lint]
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3 # actions/checkout version v3
      - name: Setup Python
        uses: actions/setup-python@v4 # actions/setup-python version v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'src/backend/requirements.txt'
      - name: Install dependencies
        run: pip install -r requirements.txt
      - name: Run unit tests
        run: python -m pytest tests/unit -v --cov=. --cov-report=xml:coverage.xml --junitxml=junit.xml
      - name: Verify coverage threshold
        run: python -c "import xml.etree.ElementTree as ET; tree = ET.parse('coverage.xml'); root = tree.getroot(); coverage = float(root.attrib['line-rate']) * 100; exit(1) if coverage < 85 else exit(0)"
      - name: Upload test results
        uses: actions/upload-artifact@v3 # actions/upload-artifact version v3
        with:
          name: test-results
          path: 'src/backend/junit.xml'
      - name: Upload coverage report
        uses: actions/upload-artifact@v3 # actions/upload-artifact version v3
        with:
          name: coverage-report
          path: 'src/backend/coverage.xml'

  integration_tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [unit_tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3 # actions/checkout version v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2 # docker/setup-buildx-action version v2
      - name: Start test environment
        run: docker-compose -f docker-compose.test.yml up -d db cache
      - name: Run integration tests
        working-directory: src/backend
        run: pytest tests/integration -v --junitxml=integration-results.xml
      - name: Upload integration test results
        uses: actions/upload-artifact@v3 # actions/upload-artifact version v3
        with:
          name: integration-test-results
          path: src/backend/integration-results.xml
      - name: Stop test environment
        if: always()
        run: docker-compose -f docker-compose.test.yml down -v

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [integration_tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3 # actions/checkout version v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2 # docker/setup-buildx-action version v2
      - name: Build backend Docker image
        uses: docker/build-push-action@v4 # docker/build-push-action version v4
        with:
          context: src/backend
          push: false
          tags: interaction-management-backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Run container test
        run: docker run --rm interaction-management-backend:${{ github.sha }} python -c "import flask; print('Flask properly installed')"
      - name: Scan Docker image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: interaction-management-backend:${{ github.sha }}
          format: sarif
          output: trivy-results.sarif
          severity: CRITICAL,HIGH
      - name: Upload vulnerability report
        uses: github/codeql-action/upload-sarif@v2 # github/codeql-action version v2
        with:
          sarif_file: trivy-results.sarif

  security_scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: [lint]
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3 # actions/checkout version v3
      - name: Setup Python
        uses: actions/setup-python@v4 # actions/setup-python version v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'src/backend/requirements.txt'
      - name: Install dependencies
        run: pip install -r requirements.txt
      - name: Install security tools
        run: pip install bandit pip-audit safety
      - name: Run pip-audit
        run: pip-audit --format=json --output=pip-audit-results.json || true
      - name: Run Bandit
        run: bandit -r . -x tests,migrations -f json -o bandit-results.json || true
      - name: Upload security scan results
        uses: actions/upload-artifact@v3 # actions/upload-artifact version v3
        with:
          name: security-scan-results
          path: src/backend/*-results.json
          if-no-files-found: warn