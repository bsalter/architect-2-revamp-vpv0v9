# .github/workflows/frontend-ci.yml
name: Frontend CI

# Trigger the workflow on push and pull request events
on:
  push:
    branches:
      - main
    paths:
      - 'src/web/**'
      - '.github/workflows/frontend-ci.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'src/web/**'

# Define global environment variables
env:
  NODE_VERSION: 18.x
  WORKING_DIRECTORY: src/web

jobs:
  lint:
    name: Code Linting
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}
    steps:
      # Checkout code from the repository
      - name: Checkout code
        uses: actions/checkout@v3  # actions/checkout version: v3

      # Set up Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v3  # actions/setup-node version: v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: src/web/package-lock.json

      # Install dependencies
      - name: Install dependencies
        run: npm ci

      # Run ESLint for code quality checks
      - name: Run linting
        run: npm run lint

      # Upload linting results as artifacts
      - name: Upload linting results
        uses: actions/upload-artifact@v3  # actions/upload-artifact version: v3
        with:
          name: lint-results
          path: src/web/eslint-results.json
          if-no-files-found: ignore

  unit_tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: [lint]
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}
    steps:
      # Checkout code from the repository
      - name: Checkout code
        uses: actions/checkout@v3  # actions/checkout version: v3

      # Set up Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v3  # actions/setup-node version: v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: src/web/package-lock.json

      # Install dependencies
      - name: Install dependencies
        run: npm ci

      # Run Angular tests
      - name: Run Angular tests
        run: npm run test:ci

      # Run Jest tests
      - name: Run Jest tests
        run: npm run test:jest

      # Verify coverage threshold
      - name: Verify coverage threshold
        run: npx jest --coverage --coverageThreshold='{"global":{"statements":85,"branches":75,"functions":90,"lines":85}}'

      # Upload test results
      - name: Upload test results
        uses: actions/upload-artifact@v3  # actions/upload-artifact version: v3
        with:
          name: test-results
          path: src/web/coverage/
          if-no-files-found: warn

  e2e_tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [unit_tests]
    steps:
      # Checkout code from the repository
      - name: Checkout code
        uses: actions/checkout@v3  # actions/checkout version: v3

      # Start test environment using Docker Compose
      - name: Start test environment
        run: docker-compose -f docker-compose.test.yml up -d frontend-serve backend db cache

      # Run Cypress tests
      - name: Run Cypress tests
        uses: cypress-io/github-action@v5  # cypress-io/github-action version: v5
        with:
          working-directory: src/web
          browser: chrome
          config-file: cypress.config.ts
          wait-on: 'http://localhost:80'
          wait-on-timeout: 120
        env:
          CYPRESS_BASE_URL: http://localhost:80
          CYPRESS_API_URL: http://localhost:5000/api

      # Upload Cypress artifacts (screenshots and videos)
      - name: Upload Cypress artifacts
        uses: actions/upload-artifact@v3  # actions/upload-artifact version: v3
        if: always()
        with:
          name: cypress-artifacts
          path: src/web/cypress/screenshots, src/web/cypress/videos
          if-no-files-found: ignore

      # Stop test environment using Docker Compose
      - name: Stop test environment
        if: always()
        run: docker-compose -f docker-compose.test.yml down -v

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [e2e_tests]
    steps:
      # Checkout code from the repository
      - name: Checkout code
        uses: actions/checkout@v3  # actions/checkout version: v3

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2  # docker/setup-buildx-action version: v2

      # Build and push the Docker image
      - name: Build frontend Docker image
        uses: docker/build-push-action@v4  # docker/build-push-action version: v4
        with:
          context: src/web
          push: false
          tags: interaction-management-frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Run container test
      - name: Run container test
        run: docker run --rm -d -p 8080:80 --name frontend-test interaction-management-frontend:${{ github.sha }} && sleep 5 && curl -s --fail http://localhost:8080/ || (docker logs frontend-test && false) && docker stop frontend-test

      # Scan Docker image for vulnerabilities
      - name: Scan Docker image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: interaction-management-frontend:${{ github.sha }}
          format: sarif
          output: trivy-results.sarif
          severity: CRITICAL,HIGH

      # Upload vulnerability report to GitHub Code Scanning
      - name: Upload vulnerability report
        uses: github/codeql-action/upload-sarif@v2  # github/codeql-action version: v2
        with:
          sarif_file: trivy-results.sarif

  security_scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: [lint]
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}
    steps:
      # Checkout code from the repository
      - name: Checkout code
        uses: actions/checkout@v3  # actions/checkout version: v3

      # Set up Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v3  # actions/setup-node version: v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: src/web/package-lock.json

      # Install dependencies
      - name: Install dependencies
        run: npm ci

      # Run npm audit to check for vulnerabilities
      - name: Run npm audit
        run: npm audit --json > npm-audit-results.json || true

      # Install OWASP Dependency Check
      - name: Install OWASP Dependency Check
        run: curl -L https://github.com/jeremylong/DependencyCheck/releases/download/v7.4.4/dependency-check-7.4.4-release.zip -o dependency-check.zip && unzip dependency-check.zip

      # Run Dependency Check
      - name: Run Dependency Check
        run: ./dependency-check/bin/dependency-check.sh --scan . --format JSON --out dependency-check-report.json --prettyPrint

      # Upload security scan results as artifacts
      - name: Upload security scan results
        uses: actions/upload-artifact@v3  # actions/upload-artifact version: v3
        with:
          name: security-scan-results
          path: src/web/npm-audit-results.json, src/web/dependency-check-report.json
          if-no-files-found: warn