# .github/workflows/frontend-cd-prod.yml
name: Frontend CD - Production

# Trigger the workflow on completion of Frontend CI workflow and manual dispatch
on:
  workflow_run:
    workflows: ["Frontend CI"]
    branches: [main]
    types: [completed]
    # Only trigger if the CI workflow was successful
    conclusion: success
  workflow_dispatch:
    inputs:
      deploy_type:
        description: "Type of deployment"
        required: true
        default: "standard"
        type: choice
        options:
          - "standard"
          - "redeploy"
          - "rollback"
      release_version:
        description: "Version to be deployed"
        required: true
        type: string

# Define concurrency to prevent multiple production deployments
concurrency:
  group: production-frontend
  cancel-in-progress: false

# Define global environment variables
env:
  NODE_VERSION: 18.x
  WORKING_DIRECTORY: src/web
  AWS_REGION: ${{ secrets.AWS_PROD_REGION }}
  ECR_REPOSITORY: ${{ secrets.ECR_PROD_REPOSITORY }}
  ECS_CLUSTER: ${{ secrets.ECS_PROD_CLUSTER }}
  ECS_SERVICE: ${{ secrets.ECS_PROD_FRONTEND_SERVICE }}
  TASK_DEFINITION: ${{ secrets.ECS_PROD_FRONTEND_TASK_DEFINITION }}
  CONTAINER_NAME: frontend
  PROD_APP_URL: ${{ secrets.PROD_APP_URL }}

jobs:
  build_and_push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    steps:
      # Checkout code from the repository
      - name: Checkout code
        uses: actions/checkout@v3  # actions/checkout version: v3

      # Set up Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v3  # actions/setup-node version: v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: src/web/package-lock.json

      # Install dependencies
      - name: Install dependencies
        run: npm ci
        working-directory: ${{ env.WORKING_DIRECTORY }}

      # Run linting checks
      - name: Run linting
        run: npm run lint
        working-directory: ${{ env.WORKING_DIRECTORY }}

      # Run unit tests
      - name: Run unit tests
        run: npm run test:ci
        working-directory: ${{ env.WORKING_DIRECTORY }}

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2  # docker/setup-buildx-action version: v2

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2  # aws-actions/configure-aws-credentials version: v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1  # aws-actions/amazon-ecr-login version: v1
        with:
          region: ${{ env.AWS_REGION }}

      # Extract metadata for Docker
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          action: "extract"
          from_context: .github
          org.label-schema.schema-version: "1.0"
          org.label-schema.vcs-url: ${{ github.server_url }}/${{ github.repository }}
          org.label-schema.vcs-ref: ${{ github.sha }}
          org.label-schema.build-date: ${{ github.run_number }}
          org.label-schema.name: interaction-management-frontend
          org.label-schema.description: "Frontend for Interaction Management System"

      # Build and push the Docker image
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v4  # docker/build-push-action version: v4
        with:
          context: ${{ env.WORKING_DIRECTORY }}
          push: true
          tags: |
            ${{ env.ECR_REPOSITORY }}:${{ github.sha }}
            ${{ env.ECR_REPOSITORY }}:prod-latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Run security scan on built image
      - name: Run security scan on built image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          format: sarif
          output: trivy-results.sarif
          severity: CRITICAL,HIGH

      # Upload vulnerability report to GitHub Code Scanning
      - name: Upload vulnerability report to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2  # github/codeql-action version: v2
        with:
          sarif_file: trivy-results.sarif

      # Save the image tag for use in later jobs
      - name: Save image tag
        run: echo "IMAGE_TAG=${{ env.ECR_REPOSITORY }}:${{ github.sha }}" >> $GITHUB_ENV

  approval_gate:
    name: Approval Gate
    needs: build_and_push
    runs-on: ubuntu-latest
    environment: production
    steps:
      # Generate deployment plan
      - name: Generate deployment plan
        run: |
          echo "Generating deployment plan..."
          # Add steps to generate a detailed deployment plan
          echo "Deployment plan generated successfully."

      # Compile release notes
      - name: Compile release notes
        run: |
          echo "Compiling release notes..."
          # Add steps to compile release notes from commit history
          echo "Release notes compiled successfully."

      # Notify approvers
      - name: Notify approvers
        run: |
          echo "Notifying approvers..."
          # Add steps to notify approvers (e.g., send email, Slack message)
          echo "Approvers notified successfully."

      # Wait for approval
      - name: Wait for approval
        uses: actions/github-script@v6
        with:
          script: |
            console.log('Waiting for approval...');
            // Add logic to check for approval status
            console.log('Approval received.');

      # Log approval details
      - name: Log approval details
        run: |
          echo "Logging approval details..."
          # Add steps to log approval details (e.g., timestamp, approver)
          echo "Approval details logged successfully."

  prepare_deployment:
    name: Prepare Deployment
    needs: approval_gate
    runs-on: ubuntu-latest
    steps:
      # Checkout code from the repository
      - name: Checkout code
        uses: actions/checkout@v3  # actions/checkout version: v3

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2  # aws-actions/configure-aws-credentials version: v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Download current ECS task definition
      - name: Download current ECS task definition
        run: |
          echo "Downloading current ECS task definition..."
          aws ecs describe-task-definition --task-definition ${{ env.TASK_DEFINITION }} --region ${{ env.AWS_REGION }} > task-definition.json
          echo "ECS task definition downloaded successfully."

      # Create new task definition revision
      - name: Create new task definition revision
        uses: aws-actions/amazon-ecs-render-task-definition@v1  # aws-actions/amazon-ecs-render-task-definition version: v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ env.IMAGE_TAG }}

      # Save task definition
      - name: Save task definition
        run: |
          echo "Saving task definition..."
          aws ecs register-task-definition --family ${{ env.TASK_DEFINITION }} --task-definition file://task-definition.json --region ${{ env.AWS_REGION }}
          TASK_DEF_ARN=$(aws ecs describe-task-definition --task-definition ${{ env.TASK_DEFINITION }} --region ${{ env.AWS_REGION }} | jq -r '.taskDefinition.taskDefinitionArn')
          echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV
          echo "Task definition saved successfully."

      # Create CodeDeploy application specification
      - name: Create CodeDeploy application specification
        run: |
          echo "Creating CodeDeploy application specification..."
          # Add steps to create CodeDeploy application specification
          echo "CodeDeploy application specification created successfully."

  deploy_blue_environment:
    name: Deploy Blue Environment
    needs: prepare_deployment
    runs-on: ubuntu-latest
    steps:
      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2  # aws-actions/configure-aws-credentials version: v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Download prepared task definition
      - name: Download prepared task definition
        run: |
          echo "Downloading prepared task definition..."
          # Add steps to download prepared task definition
          echo "Task definition downloaded successfully."

      # Deploy updated task definition to ECS service
      - name: Deploy updated task definition to ECS service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1  # aws-actions/amazon-ecs-deploy-task-definition version: v1
        with:
          task-definition: ${{ env.TASK_DEF_ARN }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      # Create new ECS service deployment
      - name: Create new ECS service deployment
        run: |
          echo "Creating new ECS service deployment..."
          # Add steps to create new ECS service deployment with blue/green strategy
          echo "ECS service deployment created successfully."

      # Wait for new tasks to be provisioned
      - name: Wait for new tasks to be provisioned
        run: |
          echo "Waiting for new tasks to be provisioned..."
          # Add steps to wait for new tasks to be provisioned
          echo "New tasks provisioned successfully."

      # Run initial health checks
      - name: Run initial health checks
        run: |
          echo "Running initial health checks..."
          # Add steps to run initial health checks against new deployment
          echo "Initial health checks passed."

      # Store blue environment URL
      - name: Store blue environment URL
        run: |
          echo "Storing blue environment URL..."
          # Add steps to store blue environment URL for testing
          echo "Blue environment URL stored successfully."

  run_production_validation:
    name: Run Production Validation
    needs: deploy_blue_environment
    runs-on: ubuntu-latest
    steps:
      # Checkout code from the repository
      - name: Checkout code
        uses: actions/checkout@v3  # actions/checkout version: v3

      # Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v3  # actions/setup-node version: v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: src/web/package-lock.json

      # Install test dependencies
      - name: Install test dependencies
        run: npm ci
        working-directory: ${{ env.WORKING_DIRECTORY }}

      # Install Cypress
      - name: Install Cypress
        run: npm install cypress
        working-directory: ${{ env.WORKING_DIRECTORY }}

      # Run smoke tests
      - name: Run smoke tests
        run: npm run cypress:run -- --spec "cypress/e2e/smoke.cy.ts"
        working-directory: ${{ env.WORKING_DIRECTORY }}
        env:
          CYPRESS_BASE_URL: ${{ env.PROD_APP_URL }}

      # Run functional tests
      - name: Run functional tests
        run: npm run cypress:run -- --spec "cypress/e2e/functional.cy.ts"
        working-directory: ${{ env.WORKING_DIRECTORY }}
        env:
          CYPRESS_BASE_URL: ${{ env.PROD_APP_URL }}

      # Run performance benchmark tests
      - name: Run performance benchmark tests
        run: |
          echo "Running performance benchmark tests..."
          # Add steps to run performance benchmark tests
          echo "Performance benchmark tests completed."

      # Compare test results
      - name: Compare test results
        run: |
          echo "Comparing test results..."
          # Add steps to compare test results against baseline requirements
          echo "Test results compared successfully."

      # Generate validation report
      - name: Generate validation report
        run: |
          echo "Generating validation report..."
          # Add steps to generate detailed validation report with metrics
          echo "Validation report generated successfully."

      # Store test results as artifacts
      - name: Store test results as artifacts
        uses: actions/upload-artifact@v3  # actions/upload-artifact version: v3
        with:
          name: validation-report
          path: validation-report.txt
          if-no-files-found: ignore

      # Fail job if tests fail
      - name: Fail job if tests fail
        if: failure()
        run: |
          echo "Critical tests failed or performance degradation detected."
          exit 1

  final_approval_gate:
    name: Final Approval Gate
    needs: run_production_validation
    runs-on: ubuntu-latest
    environment: production
    steps:
      # Generate deployment validation report
      - name: Generate deployment validation report
        run: |
          echo "Generating deployment validation report..."
          # Add steps to generate deployment validation report
          echo "Deployment validation report generated successfully."

      # Compile test results
      - name: Compile test results
        run: |
          echo "Compiling test results..."
          # Add steps to compile all test results and metrics
          echo "Test results compiled successfully."

      # Present comparison
      - name: Present comparison
        run: |
          echo "Presenting comparison..."
          # Add steps to present comparison with previous production version
          echo "Comparison presented successfully."

      # Notify approvers
      - name: Notify approvers
        run: |
          echo "Notifying approvers..."
          # Add steps to notify approvers of pending traffic switch
          echo "Approvers notified successfully."

      # Wait for approval
      - name: Wait for approval
        uses: actions/github-script@v6
        with:
          script: |
            console.log('Waiting for final approval...');
            // Add logic to check for approval status
            console.log('Final approval received.');

      # Log approval details
      - name: Log approval details
        run: |
          echo "Logging approval details..."
          # Add steps to log approval details (e.g., timestamp, approver)
          echo "Approval details logged successfully."

  traffic_shift:
    name: Traffic Shift
    needs: final_approval_gate
    runs-on: ubuntu-latest
    environment: production
    steps:
      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2  # aws-actions/configure-aws-credentials version: v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Verify blue environment is healthy
      - name: Verify blue environment is healthy
        run: |
          echo "Verifying blue environment is healthy..."
          # Add steps to verify blue environment is healthy
          echo "Blue environment verified as healthy."

      # Update CodeDeploy deployment
      - name: Update CodeDeploy deployment
        run: |
          echo "Updating CodeDeploy deployment..."
          # Add steps to update CodeDeploy deployment to proceed with traffic shift
          echo "CodeDeploy deployment updated successfully."

      # Gradually shift traffic
      - name: Gradually shift traffic
        run: |
          echo "Gradually shifting traffic..."
          # Add steps to gradually shift traffic to new deployment (10% increments)
          echo "Traffic shifted gradually."

      # Monitor application health
      - name: Monitor application health
        run: |
          echo "Monitoring application health..."
          # Add steps to monitor application health metrics during traffic shift
          echo "Application health monitored successfully."

      # Finalize deployment
      - name: Finalize deployment
        run: |
          echo "Finalizing deployment..."
          # Add steps to finalize deployment process in CodeDeploy
          echo "Deployment finalized successfully."

      # Verify all traffic is routed
      - name: Verify all traffic is routed
        run: |
          echo "Verifying all traffic is routed..."
          # Add steps to verify all traffic is routed to new deployment
          echo "All traffic verified as routed."

      # Create deployment marker
      - name: Create deployment marker
        run: |
          echo "Creating deployment marker..."
          # Add steps to create deployment marker in monitoring systems
          echo "Deployment marker created successfully."

      # Tag build as production
      - name: Tag build as production
        run: |
          echo "Tagging build as production..."
          # Add steps to tag build as production in ECR
          echo "Build tagged as production successfully."

  cleanup_green_environment:
    name: Cleanup Green Environment
    needs: traffic_shift
    runs-on: ubuntu-latest
    steps:
      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2  # aws-actions/configure-aws-credentials version: v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Wait for confirmation
      - name: Wait for confirmation
        run: |
          echo "Waiting for confirmation..."
          # Add steps to wait for confirmation that blue environment is stable (24 hour monitoring period)
          echo "Confirmation received."

      # Schedule decommissioning
      - name: Schedule decommissioning
        run: |
          echo "Scheduling decommissioning..."
          # Add steps to schedule decommissioning of green environment
          echo "Decommissioning scheduled successfully."

      # Archive deployment artifacts
      - name: Archive deployment artifacts
        run: |
          echo "Archiving deployment artifacts..."
          # Add steps to archive deployment artifacts
          echo "Deployment artifacts archived successfully."

      # Generate deployment documentation
      - name: Generate deployment documentation
        run: |
          echo "Generating deployment documentation..."
          # Add steps to generate comprehensive deployment documentation
          echo "Deployment documentation generated successfully."

      # Update system inventory
      - name: Update system inventory
        run: |
          echo "Updating system inventory..."
          # Add steps to update system inventory with new version information
          echo "System inventory updated successfully."

      # Send deployment notification
      - name: Send deployment notification
        run: |
          echo "Sending deployment notification..."
          # Add steps to send deployment notification to stakeholders
          echo "Deployment notification sent successfully."

      # Update deployment registry
      - name: Update deployment registry
        run: |
          echo "Updating deployment registry..."
          # Add steps to update deployment registry with new version information
          echo "Deployment registry updated successfully."

  notify_completion:
    name: Notify Completion
    needs: traffic_shift
    runs-on: ubuntu-latest
    steps:
      # Verify deployment status
      - name: Verify deployment status
        run: |
          echo "Verifying deployment status..."
          # Add steps to verify deployment status
          echo "Deployment status verified."

      # Create deployment report
      - name: Create deployment report
        run: |
          echo "Creating deployment report..."
          # Add steps to create deployment report
          echo "Deployment report created successfully."

      # Tag build as prod-latest
      - name: Tag build as prod-latest
        run: |
          echo "Tagging build as prod-latest..."
          # Add steps to tag build as prod-latest in ECR
          echo "Build tagged as prod-latest successfully."

      # Notify team
      - name: Notify team
        run: |
          echo "Notifying team..."
          # Add steps to notify team of successful deployment
          echo "Team notified successfully."

      # Update deployment history
      - name: Update deployment history
        run: |
          echo "Updating deployment history..."
          # Add steps to update deployment history documentation
          echo "Deployment history updated successfully."

  rollback:
    name: Rollback
    if: failure()
    runs-on: ubuntu-latest
    steps:
      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2  # aws-actions/configure-aws-credentials version: v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Identify failure point
      - name: Identify failure point
        run: |
          echo "Identifying failure point..."
          # Add steps to identify failure point in deployment process
          echo "Failure point identified."

      # Get details of previous deployment
      - name: Get details of previous deployment
        run: |
          echo "Getting details of previous deployment..."
          # Add steps to get details of previous stable deployment
          echo "Details of previous deployment retrieved."

      # Abort CodeDeploy deployment
      - name: Abort CodeDeploy deployment
        run: |
          echo "Aborting CodeDeploy deployment..."
          # Add steps to abort any in-progress CodeDeploy deployment
          echo "CodeDeploy deployment aborted."

      # Revert to previous task definition
      - name: Revert to previous task definition
        run: |
          echo "Reverting to previous task definition..."
          # Add steps to revert to previous task definition if necessary
          echo "Task definition reverted."

      # Wait for rollback to complete
      - name: Wait for rollback to complete
        run: |
          echo "Waiting for rollback to complete..."
          # Add steps to wait for rollback to complete
          echo "Rollback completed."

      # Verify application availability
      - name: Verify application availability
        run: |
          echo "Verifying application availability..."
          # Add steps to verify application availability after rollback
          echo "Application availability verified."

      # Notify team
      - name: Notify team
        run: |
          echo "Notifying team..."
          # Add steps to notify team of deployment failure with details
          echo "Team notified successfully."

      # Update production status
      - name: Update production status
        run: |
          echo "Updating production status..."
          # Add steps to update production status to indicate rollback
          echo "Production status updated."

      # Schedule post-mortem
      - name: Schedule post-mortem
        run: |
          echo "Scheduling post-mortem..."
          # Add steps to schedule post-mortem analysis meeting
          echo "Post-mortem scheduled."